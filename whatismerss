<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Merss Protocol - What is Merss? (Content Only)</title>
    <style>
        /* General Reset and Body Styles */
        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
        }

        body {
            font-family: 'Inter', -apple-system, BlinkMacMacSystemFont, 'Segoe UI', Roboto, sans-serif;
            background: linear-gradient(135deg, #1a1a1a 0%, #2c2c2c 50%, #1a1a1a 100%);
            color: #ffffff;
            overflow-x: hidden;
            overflow-y: auto;
            /* Ensure body takes full height for content centering if needed */
            min-height: 100vh;
            display: flex;
            flex-direction: column;
            justify-content: center; /* Vertically center the content */
            align-items: center; /* Horizontally center the content */
        }

        /* Animated background stars (site-wide) */
        .stars {
            position: fixed;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            pointer-events: none;
            z-index: 1;
            transition: transform 0.1s ease-out;
        }

        .star {
            position: absolute;
            width: 2px;
            height: 2px;
            background: rgba(255, 255, 255, 0.7);
            border-radius: 50%;
            animation: twinkle 3s infinite;
        }

        @keyframes twinkle {
            0%, 100% { opacity: 0.3; transform: scale(1); }
            50% { opacity: 1; transform: scale(1.2); }
        }

        /* What is Merss? Section */
        .image-text-section {
            position: relative;
            background-color: #ffffff;
            padding: 4rem 2rem; /* Adjusted padding for content only */
            max-width: 100%;
            margin: auto; /* Center the section itself */
            display: flex;
            align-items: center;
            justify-content: center;
            gap: 4rem;
            overflow: hidden;
            min-height: 70vh; /* Keep a minimum height for visual impact */
            border-radius: 15px; /* Add some border-radius to the section itself */
            box-shadow: 0 10px 30px rgba(0, 0, 0, 0.3); /* Add shadow for depth */
            z-index: 5; /* Ensure it's above stars */
        }

        .image-text-section .section-content {
            display: flex;
            align-items: center;
            justify-content: center;
            gap: 4rem;
            max-width: 1200px;
            width: 100%;
            position: relative;
            z-index: 2;
        }

        .image-text-section .image-wrapper {
            flex: 1;
            display: flex;
            justify-content: center;
            align-items: center;
            min-width: 300px;
            border-radius: 15px;
            box-shadow: 0 10px 30px rgba(0, 0, 0, 0.2);
            overflow: hidden;
        }

        .logo-falling-canvas {
            display: block;
            width: 100%;
            height: 400px;
            background-color: #1a1a1a;
            border-radius: 15px;
            box-shadow: 0 10px 30px rgba(0, 0, 0, 0.2);
        }

        .image-text-section .text-content {
            flex: 1;
            text-align: left;
            max-width: 600px;
        }

        .image-text-section .text-content h2 {
            font-size: clamp(2rem, 4vw, 3.5rem);
            font-weight: 800;
            margin-bottom: 1.5rem;
            background: linear-gradient(135deg, #1a1a1a 0%, #2c2c2c 50%, #1a1a1a 100%);
            -webkit-background-clip: text;
            -webkit-text-fill-color: transparent;
            background-clip: text;
            line-height: 1.1;
        }

        .image-text-section .text-content p {
            font-size: 1.1rem;
            line-height: 1.7;
            color: #4a5568;
            margin-bottom: 1rem;
        }

        /* Canvas for dark animation */
        .dark-animation-canvas {
            position: absolute;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            z-index: 1;
            pointer-events: none;
        }

        /* Responsive Design */
        @media (min-width: 769px) {
            .image-text-section .section-content {
                flex-direction: row;
            }
        }

        @media (max-width: 768px) {
            .image-text-section {
                padding: 2rem 1rem; /* Smaller padding on mobile */
                margin-top: 0; /* No header to account for */
            }
            .image-text-section .section-content {
                flex-direction: column;
                text-align: center;
            }
            .image-text-section .text-content {
                text-align: center;
            }
        }
    </style>
</head>
<body>
    <!-- Animated Stars Background -->
    <div class="stars" id="stars"></div>

    <!-- What is Merss? Section -->
    <section class="image-text-section" id="what-is-merss">
        <canvas class="dark-animation-canvas" id="darkAnimationCanvas"></canvas>
        <div class="section-content">
            <div class="image-wrapper">
                <canvas class="logo-falling-canvas" id="logoFallingCanvas"></canvas>
            </div>
            <div class="text-content">
                <h2>What is Merss?</h2>
                <p>
                    Merss (MSZ) is a decentralized crypto token designed to make <strong>lending, borrowing, and earning rewards</strong> simple and accessible for everyone. There are <strong>no banks involved, no middlemen, and no complicated setup required.</strong>
                </p>
                <p>
                    By locking your Merss tokens, you can earn up to 10% in rewards over time. You can even transfer those rewards to others without giving up control of your tokens. This feature is known as <strong>delegated yield</strong>.
                </p>
                <p>
                    Fast, secure, and environmentally friendly, Merss is built for the <strong>bold</strong>, those <strong>creating wealth, shaping the future, and joining a movement greater than themselves.</strong>
                </p>
            </div>
        </div>
    </section>

    <script>
        // Generate animated stars
        function createStars() {
            const starsContainer = document.getElementById('stars');
            const numberOfStars = 50;

            for (let i = 0; i < numberOfStars; i++) {
                const star = document.createElement('div');
                star.className = 'star';
                star.style.left = Math.random() * 100 + '%';
                star.style.top = Math.random() * 100 + '%';
                star.style.animationDelay = Math.random() * 3 + 's';
                starsContainer.appendChild(star);
            }
        }

        // Parallax effect for background stars based on mouse movement
        const starsContainer = document.getElementById('stars');
        const parallaxStrength = 0.02;

        document.body.addEventListener('mousemove', (e) => { // Apply to body for site-wide effect
            const centerX = window.innerWidth / 2;
            const centerY = window.innerHeight / 2;

            const mouseX = e.clientX - centerX;
            const mouseY = e.clientY - centerY;

            const translateX = -mouseX * parallaxStrength;
            const translateY = -mouseY * parallaxStrength;

            starsContainer.style.transform = `translate3d(${translateX}px, ${translateY}px, 0)`;
        });

        // --- Dark Animation for the "What is Merss?" section ---
        const darkAnimationCanvas = document.getElementById('darkAnimationCanvas');
        const darkAnimationCtx = darkAnimationCanvas.getContext('2d');
        let darkParticles = [];
        const numDarkParticles = 70;
        let mouseXDark = 0;
        let mouseYDark = 0;
        let isMouseInsideDarkSection = false;
        let animationFrameIdDarkParticles;

        class DarkParticle {
            constructor(x, y) {
                this.x = x;
                this.y = y;
                this.radius = Math.random() * 4 + 3;
                this.originalOpacity = Math.random() * 0.4 + 0.2;
                this.opacity = this.originalOpacity;
                this.vx = (Math.random() - 0.5) * 0.8;
                this.vy = (Math.random() - 0.5) * 0.8;
                this.life = 0;
                this.maxLife = 300;
            }

            draw() {
                darkAnimationCtx.beginPath();
                darkAnimationCtx.arc(this.x, this.y, this.radius, 0, Math.PI * 2);
                darkAnimationCtx.fillStyle = `rgba(180, 180, 180, ${this.opacity})`;
                darkAnimationCtx.fill();
            }

            update() {
                this.x += this.vx;
                this.y += this.vy;
                this.life++;

                if (this.life >= this.maxLife || this.x < 0 || this.x > darkAnimationCanvas.width || this.y < 0 || this.y > darkAnimationCanvas.height) {
                    this.reset();
                }

                if (isMouseInsideDarkSection) {
                    const dx = mouseXDark - this.x;
                    const dy = mouseYDark - this.y;
                    const distance = Math.sqrt(dx * dx + dy * dy);
                    const maxDistance = 200;

                    if (distance < maxDistance) {
                        const attractionFactor = (1 - distance / maxDistance) * 0.1;
                        this.vx += dx * attractionFactor;
                        this.vy += dy * attractionFactor;
                        this.opacity = this.originalOpacity + (1 - distance / maxDistance) * 0.6;
                    } else {
                        this.opacity = this.originalOpacity;
                    }
                } else {
                    this.opacity = this.originalOpacity;
                }

                this.vx *= 0.98;
                this.vy *= 0.98;

                this.vx += (Math.random() - 0.5) * 0.02;
                this.vy += (Math.random() - 0.5) * 0.02;
            }

            reset() {
                this.x = Math.random() * darkAnimationCanvas.width;
                this.y = Math.random() * darkAnimationCanvas.height;
                this.radius = Math.random() * 4 + 3;
                this.originalOpacity = Math.random() * 0.4 + 0.2;
                this.opacity = this.originalOpacity;
                this.vx = (Math.random() - 0.5) * 0.8;
                this.vy = (Math.random() - 0.5) * 0.8;
                this.life = 0;
            }
        }

        function initDarkParticles() {
            darkParticles = [];
            for (let i = 0; i < numDarkParticles; i++) {
                darkParticles.push(new DarkParticle(
                    Math.random() * darkAnimationCanvas.width,
                    Math.random() * darkAnimationCanvas.height
                ));
            }
        }

        function animateDarkParticles() {
            darkAnimationCtx.clearRect(0, 0, darkAnimationCanvas.width, darkAnimationCtx.canvas.height);
            darkParticles.forEach(particle => {
                particle.update();
                particle.draw();
            });
            animationFrameIdDarkParticles = requestAnimationFrame(animateDarkParticles);
        }

        const imageTextSection = document.getElementById('what-is-merss');

        function resizeDarkAnimationCanvas() {
            const rect = imageTextSection.getBoundingClientRect();
            darkAnimationCanvas.width = rect.width;
            darkAnimationCanvas.height = rect.height;
            darkAnimationCanvas.style.top = '0px';
            darkAnimationCanvas.style.left = '0px';
            initDarkParticles();
        }

        imageTextSection.addEventListener('mousemove', (e) => {
            const rect = imageTextSection.getBoundingClientRect();
            mouseXDark = e.clientX - rect.left;
            mouseYDark = e.clientY - rect.top;
        });

        imageTextSection.addEventListener('mouseenter', () => {
            isMouseInsideDarkSection = true;
        });

        imageTextSection.addEventListener('mouseleave', () => {
            isMouseInsideDarkSection = false;
        });

        window.addEventListener('load', () => {
            resizeDarkAnimationCanvas();
            animateDarkParticles();
            createStars(); // Initialize stars on load
        });
        window.addEventListener('resize', resizeDarkAnimationCanvas);

        // --- Falling Logo Animation ---
        const logoFallingCanvas = document.getElementById('logoFallingCanvas');
        const logoFallingCtx = logoFallingCanvas.getContext('2d');
        const logoImage = new Image();
        logoImage.src = 'https://i.postimg.cc/L8RSh77b/Merssl.png';
        let fallingLogos = [];
        const numFallingLogos = 50;
        let animationFrameIdFallingLogos;

        logoImage.onload = () => {
            initFallingLogos();
            animateFallingLogos();
        };

        logoImage.onerror = () => {
            console.error("Failed to load mini logo image for falling animation. Using text fallback.");
            initFallingLogos(true);
            animateFallingLogos();
        };

        class FallingLogo {
            constructor(useTextFallback = false) {
                this.useTextFallback = useTextFallback;
                this.reset();
            }

            reset() {
                this.size = Math.random() * 30 + 30;
                this.x = Math.random() * logoFallingCanvas.width;
                this.y = -this.size;
                this.speed = Math.random() * 1.5 + 1;
                this.opacity = Math.random() * 0.8 + 0.5;
                this.rotation = Math.random() * Math.PI * 2;
                this.rotationSpeed = (Math.random() - 0.5) * 0.08;
                this.vx = (Math.random() - 0.5) * 0.8;
            }

            draw() {
                if (this.useTextFallback || !logoImage.complete || logoImage.naturalWidth === 0) {
                    logoFallingCtx.fillStyle = `rgba(255, 255, 255, ${this.opacity})`;
                    logoFallingCtx.font = `${this.size}px Arial`;
                    logoFallingCtx.textAlign = 'center';
                    logoFallingCtx.textBaseline = 'middle';
                    logoFallingCtx.fillText('M', this.x + this.size / 2, this.y + this.size / 2);
                    return;
                }

                logoFallingCtx.save();
                logoFallingCtx.translate(this.x + this.size / 2, this.y + this.size / 2);
                logoFallingCtx.rotate(this.rotation);
                logoFallingCtx.globalAlpha = this.opacity;
                logoFallingCtx.drawImage(logoImage, -this.size / 2, -this.size / 2, this.size, this.size);
                logoFallingCtx.restore();
            }

            update() {
                this.y += this.speed;
                this.x += this.vx;
                this.rotation += this.rotationSpeed;
                this.opacity -= 0.001;

                if (this.y > logoFallingCanvas.height || this.opacity <= 0 || this.x < -this.size || this.x > logoFallingCanvas.width + this.size) {
                    this.reset();
                }
            }
        }

        function initFallingLogos(useTextFallback = false) {
            fallingLogos = [];
            for (let i = 0; i < numFallingLogos; i++) {
                fallingLogos.push(new FallingLogo(useTextFallback));
            }
        }

        function animateFallingLogos() {
            logoFallingCtx.clearRect(0, 0, logoFallingCanvas.width, logoFallingCanvas.height);
            fallingLogos.forEach(logo => {
                logo.update();
                logo.draw();
            });
            animationFrameIdFallingLogos = requestAnimationFrame(animateFallingLogos);
        }

        function resizeLogoFallingCanvas() {
            const imageWrapper = document.querySelector('.image-text-section .image-wrapper');
            if (imageWrapper) {
                logoFallingCanvas.width = imageWrapper.clientWidth;
                logoFallingCanvas.height = imageWrapper.clientHeight;
                initFallingLogos();
            }
        }

        window.addEventListener('load', resizeLogoFallingCanvas);
        window.addEventListener('resize', resizeLogoFallingCanvas);
    </script>
</body>
</html>
